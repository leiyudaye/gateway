// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flowcount.proto

package flowcount

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReportFlowCountReq struct {
	Flowcount            int64    `protobuf:"varint,1,opt,name=flowcount,proto3" json:"flowcount,omitempty"`
	QPS                  int64    `protobuf:"varint,2,opt,name=QPS,proto3" json:"QPS,omitempty"`
	Interval             int32    `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportFlowCountReq) Reset()         { *m = ReportFlowCountReq{} }
func (m *ReportFlowCountReq) String() string { return proto.CompactTextString(m) }
func (*ReportFlowCountReq) ProtoMessage()    {}
func (*ReportFlowCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b89d21e9c9c2fd59, []int{0}
}

func (m *ReportFlowCountReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportFlowCountReq.Unmarshal(m, b)
}
func (m *ReportFlowCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportFlowCountReq.Marshal(b, m, deterministic)
}
func (m *ReportFlowCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportFlowCountReq.Merge(m, src)
}
func (m *ReportFlowCountReq) XXX_Size() int {
	return xxx_messageInfo_ReportFlowCountReq.Size(m)
}
func (m *ReportFlowCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportFlowCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReportFlowCountReq proto.InternalMessageInfo

func (m *ReportFlowCountReq) GetFlowcount() int64 {
	if m != nil {
		return m.Flowcount
	}
	return 0
}

func (m *ReportFlowCountReq) GetQPS() int64 {
	if m != nil {
		return m.QPS
	}
	return 0
}

func (m *ReportFlowCountReq) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type ReportFlowCountRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportFlowCountRsp) Reset()         { *m = ReportFlowCountRsp{} }
func (m *ReportFlowCountRsp) String() string { return proto.CompactTextString(m) }
func (*ReportFlowCountRsp) ProtoMessage()    {}
func (*ReportFlowCountRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b89d21e9c9c2fd59, []int{1}
}

func (m *ReportFlowCountRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportFlowCountRsp.Unmarshal(m, b)
}
func (m *ReportFlowCountRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportFlowCountRsp.Marshal(b, m, deterministic)
}
func (m *ReportFlowCountRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportFlowCountRsp.Merge(m, src)
}
func (m *ReportFlowCountRsp) XXX_Size() int {
	return xxx_messageInfo_ReportFlowCountRsp.Size(m)
}
func (m *ReportFlowCountRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportFlowCountRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ReportFlowCountRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ReportFlowCountReq)(nil), "flowcount.ReportFlowCountReq")
	proto.RegisterType((*ReportFlowCountRsp)(nil), "flowcount.ReportFlowCountRsp")
}

func init() { proto.RegisterFile("flowcount.proto", fileDescriptor_b89d21e9c9c2fd59) }

var fileDescriptor_b89d21e9c9c2fd59 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xcb, 0xc9, 0x2f,
	0x4f, 0xce, 0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x25, 0x70, 0x09, 0x05, 0xa5, 0x16, 0xe4, 0x17, 0x95, 0xb8, 0xe5, 0xe4, 0x97, 0x3b, 0x83, 0x84,
	0x82, 0x52, 0x0b, 0x85, 0x64, 0xb8, 0x10, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x10,
	0x02, 0x42, 0x02, 0x5c, 0xcc, 0x81, 0x01, 0xc1, 0x12, 0x4c, 0x60, 0x71, 0x10, 0x53, 0x48, 0x8a,
	0x8b, 0x23, 0x33, 0xaf, 0x24, 0xb5, 0xa8, 0x2c, 0x31, 0x47, 0x82, 0x59, 0x81, 0x51, 0x83, 0x35,
	0x08, 0xce, 0x57, 0x12, 0xc1, 0xb4, 0xa1, 0xb8, 0xc0, 0x28, 0x86, 0x8b, 0x13, 0xce, 0x17, 0xf2,
	0xe7, 0xe2, 0x47, 0x53, 0x22, 0x24, 0xab, 0x87, 0x70, 0x34, 0xa6, 0x03, 0xa5, 0xf0, 0x49, 0x17,
	0x17, 0x38, 0xf1, 0x46, 0x71, 0xeb, 0xe9, 0xc3, 0x55, 0x24, 0xb1, 0x81, 0xbd, 0x6d, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0xd2, 0xb0, 0xb3, 0x09, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlowCountClient is the client API for FlowCount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlowCountClient interface {
	// 获取用户信息
	ReportFlowCount(ctx context.Context, in *ReportFlowCountReq, opts ...grpc.CallOption) (*ReportFlowCountRsp, error)
}

type flowCountClient struct {
	cc *grpc.ClientConn
}

func NewFlowCountClient(cc *grpc.ClientConn) FlowCountClient {
	return &flowCountClient{cc}
}

func (c *flowCountClient) ReportFlowCount(ctx context.Context, in *ReportFlowCountReq, opts ...grpc.CallOption) (*ReportFlowCountRsp, error) {
	out := new(ReportFlowCountRsp)
	err := c.cc.Invoke(ctx, "/flowcount.FlowCount/ReportFlowCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowCountServer is the server API for FlowCount service.
type FlowCountServer interface {
	// 获取用户信息
	ReportFlowCount(context.Context, *ReportFlowCountReq) (*ReportFlowCountRsp, error)
}

// UnimplementedFlowCountServer can be embedded to have forward compatible implementations.
type UnimplementedFlowCountServer struct {
}

func (*UnimplementedFlowCountServer) ReportFlowCount(ctx context.Context, req *ReportFlowCountReq) (*ReportFlowCountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportFlowCount not implemented")
}

func RegisterFlowCountServer(s *grpc.Server, srv FlowCountServer) {
	s.RegisterService(&_FlowCount_serviceDesc, srv)
}

func _FlowCount_ReportFlowCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportFlowCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowCountServer).ReportFlowCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowcount.FlowCount/ReportFlowCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowCountServer).ReportFlowCount(ctx, req.(*ReportFlowCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlowCount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flowcount.FlowCount",
	HandlerType: (*FlowCountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportFlowCount",
			Handler:    _FlowCount_ReportFlowCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flowcount.proto",
}
